' ********** Copyright 2016 Roku Corp.  All Rights Reserved. **********

' A context node has a parameters and response field
' - parameters corresponds to everything related to an HTTP request
' - response corresponds to everything related to an HTTP response
'
' Component Variables:
'   m.port: the UriFetcher message port
'   m.jobsById: an AA containing a history of HTTP requests/responses

' =============================================================================
' init - UriFetcher constructor
'        Sets the execution function for the UriFetcher and tells the UriFetcher to run
' =============================================================================

sub init()

  print "UriHandler.brs - [init]"

  ' create the message port

  m.port = createObject("roMessagePort")

  ' Fields for checking if content has been loaded.
  ' Each row is assumed to be a different request for a rss feed

  m.top.numRows = 4
  m.top.numRowsReceived = 0
  m.top.numBadRequests = 0
  m.top.contentSet = false

  ' Stores the content if not all requests are ready

  m.top.contentCache = createObject("roSGNode", "ContentNode")

  ' Setting callbacks for url request and response.
  ' Specifying a message port instead of a function sends an roSGNodeEvent message to the roMessagePort
  ' identified by port when the subject node field identified by fieldName changes value.

  m.top.observeField("request", m.port)
  m.top.observeField("contentCache", m.port)

  ' Setting the task thread function

  m.top.functionName = "go"
  m.top.control = "RUN"

end sub

' =============================================================================
' go - The "Task" function has an event loop which calls the appropriate
'      functions for handling requests made by the HeroScreen and responses
'      when requests are finished
'
'      Variables:
'         m.jobsById: AA storing HTTP transactions where:
'	                    key: id of HTTP request
'                     val: an AA containing:
'                          key: context
'                          val: a node containing request info
'                          key: xfer
'                          val: the roUrlTransfer object'
'
' =============================================================================

sub go()

  print "UriHandler.brs - [go]"

  ' Holds requests by id

  m.jobsById = {}

	' UriFetcher event loop

  while true

    msg = wait(0, m.port)
    mt = type(msg)

    ' If a request was made, running GetField() on the message gets the name of the field that changed,
    ' and running GetData() on the message gets the new field value at the time of the change.

    if mt = "roSGNodeEvent"

      nodeField = msg.getField()

      print "UriHandler.brs - [go] Received event type '"; mt; "' with field '"; nodeField; "'"

      if nodeField = "request"
        if addRequest(msg.getData()) <> true then print "Invalid request"
      else if nodeField = "contentCache"
        updateContent()
      else
        print "UriHandler.brs - [go] Error: unrecognized field '"; nodeField ; "'"
      end if

    ' If a response was received from the "roUrlTransfer" AsyncGetToString() call
    ' that is generated by addRequest(), then process the reponse.

    else if mt = "roUrlEvent"

      processResponse(msg)

    ' Handle unexpected cases

    else
	   print "UriHandler.brs - [go] Error: unrecognized event type '"; mt ; "'"
    end if

  end while

end sub

' =============================================================================
' addRequest - Makes the HTTP request
'
'              Parameters:
'	                request: a node containing the request params/context.
'
'              Variables:
'                 m.jobsById: used to store a history of HTTP requests
'
'              Return value:
'                 True if request succeeds
'              	  False if invalid request
'
' =============================================================================

function addRequest(request as Object) as Boolean

  ' A request must be an associative array with a context property and a parser property.
  ' The context will have the request parameters (including the uri)

  if type(request) = "roAssociativeArray"

    context = request.context
    parser = request.parser

    print "UriHandler.brs - [addRequest] num = "; context.num

    ' Create a Parser node if one has not previously been created

    if type(parser) = "roString"

      ' Create a ContentNode for the parser and watch for the parsed result to be set

      if m.Parser = invalid
        m.Parser = createObject("roSGNode", parser)
        m.Parser.observeField("parsedContent", m.port)
      else
        print "UriHandler.brs - [addRequest] Parser already created"
      end if

    else

      print "UriHandler.brs - [addRequest] Error: Incorrect type for Parser: " ; type(parser)
      return false

    end if

    ' The request's context is always a "roSGNode" and not an assoicative array

    if type(context) = "roSGNode"

      parameters = context.parameters

      ' The context's "parameters" property value is an associative array with one property (named "uri"
      ' with a string as its value)

      if type(parameters) = "roAssociativeArray"

      	uri = parameters.uri

        if type(uri) = "roString"

          urlXfer = createObject("roUrlTransfer")
          urlXfer.setUrl(uri)
          urlXfer.setPort(m.port)

          ' Should transfer more stuff from parameters to urlXfer

          idKey = stri(urlXfer.getIdentity()).trim()

          ' AsyncGetToString returns false if the request couldn't be issued

          ok = urlXfer.AsyncGetToString()

          if ok then
            m.jobsById[idKey] = {
              context: request,
              xfer: urlXfer
            }
          else
            print "UriHandler.brs - [addRequest] Error: request couldn't be issued"
          end if

  		    print "UriHandler.brs - [addRequest] Initiating transfer '"; idkey; "' for URI '"; uri; "'"; " succeeded: "; ok

        else
          print "UriHandler.brs - [addRequest] Error: invalid uri: "; uri
          m.top.numBadRequests++
  			end if

      else
        print "UriHandler.brs - [addRequest] Error: parameters is the wrong type: " + type(parameters)
        return false
      end if

  	else
      print "UriHandler.brs - [addRequest] Error: context is the wrong type: " + type(context)
  		return false
  	end if

  else

    print "UriHandler.brs - [addRequest] Error: request is the wrong type: " + type(request)
    return false

  end if

  return true

end function

' =============================================================================
' updateContent - Callback function for when content has finished parsing
' =============================================================================

sub updateContent()

  print "UriHandler.brs - [updateContent]"

  ' Received another row of content

  m.top.numRowsReceived++

  ' Return if the content is already set

  if m.top.contentSet return

  ' Set the UI if all content from all streams are ready
  ' Note: this technique is hindered by slowest request
  ' Need to think of a better asynchronous method here!

  if m.top.numRows = m.top.numRowsReceived

    parent = createObject("roSGNode", "ContentNode")

    for i = 0 to (m.top.numRowsReceived - 1)

      oldParent = m.top.contentCache.getField(i.toStr())

      if oldParent <> invalid
        for j = 0 to (oldParent.getChildCount() - 1)
          oldParent.getChild(0).reparent(parent,true)
        end for
      end if

    end for

    print "UriHandler.brs - [updateContent] All content has finished loading"

    m.top.contentSet = true
    m.top.responseContent = parent

  else

    print "UriHandler.brs - [updateContent] Not all content has finished loading yet"

  end if

end sub

' =============================================================================
' processResponse - Processes the HTTP response and sets the node's response
'                   field with the response info
'
'                   Parameters:
'                      msg: a roUrlEvent (https://sdkdocs.roku.com/display/sdkdoc/roUrlEvent)
'
' =============================================================================

sub processResponse(msg as Object)

  print "UriHandler.brs - [processResponse]"

  idKey = stri(msg.GetSourceIdentity()).trim()
  job = m.jobsById[idKey]

  if job <> invalid

    context = job.context
    parameters = context.context.parameters
    jobnum = job.context.context.num
    uri = parameters.uri

    print "UriHandler.brs - [processResponse] Response for transfer '"; idkey; "' for URI '"; uri; "'"

    result = {
      code:    msg.GetResponseCode(),
      headers: msg.GetResponseHeaders(),
      content: msg.GetString(),
      num:     jobnum
    }

    ' could handle various error codes, retry, etc. here

    m.jobsById.delete(idKey)
    job.context.context.response = result

    if msg.GetResponseCode() = 200
      'm.Parser.response = (result.content, result.num)
      m.Parser.response = result
    else
      print "UriHandler.brs - [processResponse] Error: status code was: " + (msg.GetResponseCode()).toStr()
      m.top.numBadRequests++
      m.top.numRowsReceived++
    end if

  else

    print "UriHandler.brs - [processResponse] Error: event for unknown job "; idkey

  end if

end sub
